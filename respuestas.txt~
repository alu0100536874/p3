18.

2.0.0p247 :001 > puts "Helloworld"
Helloworld
 => nil 
2.0.0p247 :002 > 


20.

2.0.0p247 :001 > puts "Hola Mundo"
Hola Mundo
 => nil 
2.0.0p247 :002 > 


21.

alu4077@cc205:~/datos/homes.rala/LPP/p3$ ruby helloworld.rb
Hola Mundo


26.

alu4077@cc205:~/datos/homes.rala/LPP/p3$ ruby byebyeWorld.rb

From: /home/alu4077/datos/homes.rala/LPP/p3/byebyeWorld.rb @ line 11 :

     6:   
     7: #set x to 10
     8:   x = 10
     9:   
    10: #start a PELP session
 => 11:  binding.pry
    12:  
    13: #program resumes here (after pry session)
    14:  puts "program resumes here. Value of x is: #{x}."

[1] pry(main)> x
=> 10

[4] pry(main)> def hello
[4] pry(main)*   puts "Hello world"
[4] pry(main)* end  
=> nil

[5] pry(main)> hello
Hello world
=> nil

[6] pry(main)> byebye
bye bye world!!!
=> nil

[7] pry(main)> x = "changed"
=> "changed"

[8] pry(main)> exit
program resumes here. Value of x is: changed.


27. El irb permite ejecutar nuestro programa inmediatemente (interpretarlo a tiempo de ejecucci贸n). Mientras con pry es un consola interativa de ruby.


34
Imprime caracteres
[1] pry(main)> "\t\n"
=> "\t\n"

Hace un salto de tabulador y a continuaci贸n de linea.
[2] pry(main)> '\t\n'
=> "\\t\\n"
 

35.
Imprime la linea y acontinuaci贸n dos salto de linea, imprime el string tal cual
[3] pry(main)> %q{hello world\n}
=> "hello world\\n"
[4] pry(main)> %q{'a''b''c'}
=> "'a''b''c'"


36.
Imprime la linea y acontinuaci贸n  salto de linea INTERPOLADA
[5] pry(main)> %Q{hello world\n}
=> "hello world\n"
[6] pry(main)> %Q{'a''b''c'}
=> "'a''b''c'"


37.
=> "\"--4--\n\"--2--\n"


38.
=> "'--4--\n'--2--\n"


39.

[18] pry(main)> s = "hello"
=> "hello"
[19] pry(main)> s[0,2]
=> "he"
[21] pry(main)> s[-1,1]
=> "o"
[22] pry(main)> s[0,10]
=> "hello"


40.
=> "hello world"


41.
=> "..."


42.
=> "222"


43. Un array
=> ["this", "is", "a", "test"]


44.
=> ["\\t", "\\n"]


45.
=> ["\t", "\n"]


46. Un Array vacio
=> [nil, nil, nil]


47. Un Array vacio
=> [nil, nil, nil]


48.
[7] pry(main)> b
=> [[1, 2], [3, 4]]

49.
[9] pry(main)> c
=> [0, 2, 4]


50.
[1] pry(main)> a = ('a'..'e').to_a
=> ["a", "b", "c", "d", "e"]
[2] pry(main)> a[1,1]
=> ["b"]
[3] pry(main)> a[-2,2]
=> ["d", "e"]
[4] pry(main)> a[0..2]
=> ["a", "b", "c"]
[5] pry(main)> a[0...1]
=> ["a"]
[6] pry(main)> a[-2..1]
=> []


51.
[7] pry(main)> a[0,2] = %w{A,B}
=> ["A,B"]
[8] pry(main)> a
=> ["A,B", "c", "d", "e"]
[9] pry(main)> a[2..5] = %w{C, D, E}
=> ["C,", "D,", "E"]
[10] pry(main)> a
=> ["A,B", "c", "C,", "D,", "E"]
[11] pry(main)> a[0,0] = [1,2,3]
=> [1, 2, 3]
[12] pry(main)> a[0,2] = []
=> []
[13] pry(main)> a
=> [3, "A,B", "c", "C,", "D,", "E"]
[14] pry(main)> a[-1,1]= ['Z']
=> ["Z"]
[15] pry(main)> a
=> [3, "A,B", "c", "C,", "D,", "Z"]
[16] pry(main)> a[-2,2] = nil
=> nil
[17] pry(main)> a
=> [3, "A,B", "c", "C,", nil]



52.

[1] pry(main)> a = (1..4).to_a
=> [1, 2, 3, 4]
[2] pry(main)> a = a+[4,5]
=> [1, 2, 3, 4, 4, 5]
[3] pry(main)> a += [[6,7,8]]
=> [1, 2, 3, 4, 4, 5, [6, 7, 8]]
[4] pry(main)> a = a+ 9
TypeError: no implicit conversion of Fixnum into Array
from (pry):4:in `+'
[5] pry(main)> a = a + 9
TypeError: no implicit conversion of Fixnum into Array
from (pry):5:in `+'


53.
[1] pry(main)> x = %w{a b c b a}
=> ["a", "b", "c", "b", "a"]
[2] pry(main)> x = x - %w{b c d}
=> ["a", "a"]
[3] pry(main)> 


54.
[3] pry(main)> z = [0]*8
=> [0, 0, 0, 0, 0, 0, 0, 0]


55.
[4] pry(main)> a =[]
=> []
[5] pry(main)> a<<1
=> [1]
[6] pry(main)> a << 2 <<3
=> [1, 2, 3]
[7] pry(main)> a << [4,5,6]
=> [1, 2, 3, [4, 5, 6]]
[8] pry(main)> a.concat [7,8]
=> [1, 2, 3, [4, 5, 6], 7, 8]


56.
[1] pry(main)> a = [1, 1, 2, 2, 3, 3, 4]
=> [1, 1, 2, 2, 3, 3, 4]
[2] pry(main)> b = [5, 5, 4, 4, 3, 3, 2]
=> [5, 5, 4, 4, 3, 3, 2]
[3] pry(main)> c = a|b
=> [1, 2, 3, 4, 5]
[4] pry(main)> d = b|a
=> [5, 4, 3, 2, 1]
[5] pry(main)> e = a & b
=> [2, 3, 4]
[6] pry(main)> f = b & a
=> [4, 3, 2]


57.
irb(main):004:0* a = 1..10
=> 1..10
irb(main):005:0> a.class
=> Range
irb(main):006:0> a.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
irb(main):007:0> b = 1...10
=> 1...10
irb(main):008:0> b.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9]


58.
irb(main):001:0> r = 0...100
=> 0...100
irb(main):002:0> r.member? 50
=> true
irb(main):003:0> r.member? 99.9
=> true


59.
irb(main):004:0> true.class
=> TrueClass
irb(main):005:0> false.class
=> FalseClass
irb(main):006:0> puts "hello" if 0
hello
=> nil
irb(main):007:0> puts "hello" if nil
=> nil
irb(main):008:0> puts "hello" if ""
(irb):8: warning: string literal in condition
hello
=> nil


60.
irb(main):001:0> x = :syn
=> :syn
irb(main):002:0> x.class
=> Symbol
irb(main):003:0> x == 'syn'
=> false
irb(main):004:0> x == :syn
=> true
irb(main):005:0> z = :'a long symbol'
=> :"a long symbol"
irb(main):006:0> z.class
=> Symbol
irb(main):009:0> x == 'syn'.to_syn
NoMethodError: undefined method `to_syn' for "syn":String
	from (irb):9
	from :0
irb(main):010:0> x.to_s == 'syn'
=> true


61.
irb(main):011:0> s = "Ruby"
=> "Ruby"
irb(main):012:0> t = s
=> "Ruby"
irb(main):013:0> t[-1]
=> 121
irb(main):014:0> print s
Ruby=> nil
irb(main):015:0> t = "Java"
=> "Java"
irb(main):016:0> print s, t
RubyJava=> nil


63.
irb(main):001:0> x, y = 4, 5
=> [4, 5]
irb(main):002:0> z = x > y ? x:y
=> 5
irb(main):003:0> x, y , z = [1,2,3]
=> [1, 2, 3]


64.
irb(main):004:0> x = {:a => 1, :b=> 2}
=> {:b=>2, :a=>1}
irb(main):005:0> x.keys
=> [:b, :a]
irb(main):006:0> x.values
=> [2, 1]
irb(main):007:0> x[:c] = 3
=> 3
irb(main):008:0> x
=> {:b=>2, :c=>3, :a=>1}
irb(main):009:0> x.delete('a')
=> nil
irb(main):010:0> x
=> {:b=>2, :c=>3, :a=>1}
irb(main):011:0> x.delete(:a)
=> 1
irb(main):012:0> 1
=> 1
irb(main):013:0> x
=> {:b=>2, :c=>3}
irb(main):014:0> x = { :a=> 1, :b=> 2, :c=> 4}
=> {:b=>2, :c=>4, :a=>1}
irb(main):015:0> x.delete_if {|k,v| v% 2 == 0}
=> {:a=>1}
irb(main):016:0> x
=> {:a=>1}


























